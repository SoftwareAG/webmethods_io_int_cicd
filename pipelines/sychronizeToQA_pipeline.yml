##############################################################################################################
#                                                                                                            #
# synchronizeDEV_pipeline.yml : Imports to QA Stage                                                         #
#                                                                                                            #
# ####### Inputs ########                                                                                    #
# assetID: (Optional) Id of the asset to be Imported                                                         #
# assetType: (Optional) Type of the asset. Currently supported options: workflow, flowservice.               #
# repoName: (Mandatory) Name of the corresponding repository.                                                #
# synchProject: (Mandatory) True if you want to synchronize complete project. If false, then you have to     #
#                provide assetID and assetType                                                               #
##############################################################################################################


trigger: none
variables:
- group: webMethodsIO_group
- group: github_group
- name: repoPath
  value: $(gitOwner)/$(repoName)


pool:
  vmImage: ubuntu-latest
resources:
  repositories:
  - repository: projectRepo
    type: github
    endpoint: github
    name: $(repoPath)
    ref: qa

steps:
- checkout: projectRepo
  submodules: "true"
  persistCredentials: "true"
  clean: "true"
  path: $(repoName)
- checkout: self
  submodules: "true"
  persistCredentials: "true"
  clean: "true"
  path: self
  
- script: |
    echo "##vso[task.setvariable variable=assetID;]NA"
    echo "##vso[task.setvariable variable=assetType;]NA"
  condition: eq(variables['synchProject'], 'true') 
  displayName: 'Adjust variables'



- bash: |
    pwd
    cd ../self
    pwd
    ls -ltr
    echo "##vso[task.setvariable variable=source_environment_hostname]`yq -e ".tenant.hostname" configs/env//qa.yml`"
    echo "##vso[task.setvariable variable=source_environment_port]`yq -e ".tenant.port" configs/env/qa.yml`"
    echo "##vso[task.setvariable variable=admin_user]`yq -e ".tenant.admin_username" configs/env/qa.yml`"
    echo "##vso[task.setvariable variable=source_type]`yq -e ".tenant.type" configs/env/qa.yml`"
    repoName=$(perl -MURI::Escape -e 'print uri_escape($ARGV[0]);' "$(repoName)")
    # echo $(repoName)
    echo "##vso[build.updatebuildnumber]$(Build.BuildNumber)-$(repoName)"
    # echo $(System.DefaultWorkingDirectory)
  workingDirectory: '$(System.DefaultWorkingDirectory)'
  displayName: 'Get Environment Tenant Details'
- script: |
    : '
    echo $(source_environment_hostname)
    echo $(source_environment_port)
    echo $(admin_user)
    echo $(source_type)
    '
    repoName=$(perl -MURI::Escape -e 'print uri_escape($ARGV[0]);' "$(repoName)")
    echo $(repoName)
    echo $(assetID)
    LOCAL_DEV_URL=https://$(source_environment_hostname):$(source_environment_port)
    
    pwd
    HOME_DIR=$(System.DefaultWorkingDirectory)/../
    cd $(System.DefaultWorkingDirectory)/../
    ls -ltr
    cd $(repoName)
    chmod +x ../self/pipelines/scripts/*.sh    
    
    #### Check and create Project
    echo "Check and create Project ..."
    ../self/pipelines/scripts/createProject.sh ${LOCAL_DEV_URL} $(admin_user) $(admin_password) $(repoName)

    echo "Importing asset ..."
    ../self/pipelines/scripts/importAsset.sh ${LOCAL_DEV_URL} $(admin_user) $(admin_password) $(repoName) $(assetID) $(assetType) ${HOME_DIR} $(synchProject) $(source_type) $(includeAllReferenceData) debug
  displayName: 'Import Asset'

- script: |
    cd ../$(repoName)
    FILE="./resources/test/environments/$(source_type).json"
    fileExists=false
    if test -f "$FILE"; then
      echo "$FILE exists."
      fileExists=true
    fi
    echo "##vso[task.setvariable variable=FileExists]$fileExists"
  displayName: 'Evaluate if Test Assets Exists'


- task: TriggerBuild@4
  inputs:
    buildDefinition: 'Test'
    useSameBranch: true
    storeInEnvironmentVariable: true
    authenticationMethod: 'OAuth Token'
    password: $(System.AccessToken)
    buildParameters: 
      'repoName:$(repoName), branch:$(source_type), environment:$(source_type)'
  displayName: Trigger Test Pipeline
  continueOnError: false
  condition: eq(variables['FileExists'], True)
- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(System.DefaultWorkingDirectory)/../$(repoName)'
    artifactName: '$(repoName)_export'
  displayName: 'Publishing the export'
- task: DeleteFiles@1
  inputs:
    SourceFolder: '$(System.DefaultWorkingDirectory)../$(repoName)'
    Contents: './*' 
  displayName: 'Remove the Export after successfull Commit'