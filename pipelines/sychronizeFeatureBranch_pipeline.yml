# Export workflow pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none
variables:
- group: webMethodsIO_group
- group: github_group
- name: repoPath
  value: $(gitOrg)/$(repoName)


pool:
  vmImage: ubuntu-latest
resources:
  repositories:
  - repository: projectRepo
    type: github
    endpoint: github
    name: $(repoPath)
    ref: $(featureBranchName)
steps:
- checkout: projectRepo
  submodules: "true"
  persistCredentials: "true"
  clean: "true"
  path: $(repoName)
- checkout: self
  submodules: "true"
  persistCredentials: "true"
  clean: "true"
  path: self

- script: |
    echo "##vso[task.setvariable variable=assetID;]NA"
    echo "##vso[task.setvariable variable=assetType;]NA"
    echo "##vso[task.setvariable variable=assetName;]NA"
  condition: eq(variables['synchProject'], 'true') 
  displayName: 'Adjust variables'



- bash: |
    pwd
    cd ../self
    pwd
    ls -ltr
    echo "##vso[task.setvariable variable=source_environment_hostname]`yq -e ".tenant.hostname" configs/play.yml`"
    echo "##vso[task.setvariable variable=source_environment_port]`yq -e ".tenant.port" configs/play.yml`"
    echo "##vso[task.setvariable variable=admin_user]`yq -e ".tenant.admin_username" configs/play.yml`"
    echo "##vso[task.setvariable variable=source_type]`yq -e ".tenant.type" configs/play.yml`"
    PROJECTNAME=$(perl -MURI::Escape -e 'print uri_escape($ARGV[0]);' "$(repoName)")
    echo ${PROJECTNAME}
    echo "##vso[build.updatebuildnumber]$(Build.BuildNumber)-${PROJECTNAME}"
    echo $(System.DefaultWorkingDirectory)
  workingDirectory: '$(System.DefaultWorkingDirectory)'
  displayName: 'Get Environment Tenant Details'
- script: |
    #echo $(source_environment_hostname)
    #echo $(source_environment_port)
    #echo $(admin_user)
    #echo $(source_type)
    repoName=$(perl -MURI::Escape -e 'print uri_escape($ARGV[0]);' "$(repoName)")
    #echo $(repoName)

  
    LOCAL_DEV_URL=https://$(source_environment_hostname):$(source_environment_port)
    #echo ${LOCAL_DEV_URL}
    HOME_DIR=$(System.DefaultWorkingDirectory)/../
    cd $(System.DefaultWorkingDirectory)/../
    cd $(repoName)
    chmod +x ../self/pipelines/scripts/*.sh    



    ###### Exporting
    echo "Exporting asset ..."
    ../self/pipelines/scripts/exportAsset.sh ${LOCAL_DEV_URL} $(admin_user) $(admin_password_ps) $(repoName) $(assetID) $(assetType) ${HOME_DIR} $(synchProject) $(source_type) $(inlcudeAllReferenceData) debug
  displayName: 'Export Asset'
  #failOnStderr: true


- script: |
    cd ../$(repoName)

    echo "Committing asset ..."
    chmod +x ../self/pipelines/scripts/github/*.sh    
    ../self/pipelines/scripts/github/commitFeatureBranch.sh $(devUser) $(Build.BuildNumber) $(featureBranchName) ${HOME_DIR} debugebug

  displayName: 'Commit the code to feature branch'

- script: |
    cd ../$(repoName)
    FILE="./resources/test/environments/$(source_type).json"
    fileExists=false
    if test -f "$FILE"; then
      echo "$FILE exists."
      fileExists=true
    fi
    echo "##vso[task.setvariable variable=FileExists]$fileExists"
  displayName: 'Evaluate if Test Assets Exists'


- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(System.DefaultWorkingDirectory)/../$(repoName)'
    artifactName: '$(repoName)_export'
  displayName: 'Publishing the export'

- task: DeleteFiles@1
  inputs:
    SourceFolder: '$(System.DefaultWorkingDirectory)../$(repoName)'
    Contents: './*' 
  displayName: 'Remove the Export after successfull Commit'
- task: TriggerBuild@4
  inputs:
    buildDefinition: 'Test'
    useSameBranch: true
    storeInEnvironmentVariable: true
    authenticationMethod: 'OAuth Token'
    password: $(System.AccessToken)
    buildParameters: 
      'repoName:$(repoName), branch:$(featureBranchName), environment:$(source_type)'
  displayName: Trigger Test Pipeline
  continueOnError: false
  condition: eq(variables['FileExists'], True)
