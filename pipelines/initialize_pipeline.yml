##############################################################################################################
#                                                                                                            #
# initialize_pipeline.yml : Initialize the repository and also the play/build stage                          #
#                                                                                                            #
# ####### Inputs ########                                                                                    #
# assetID: (Optional) Id of the asset to be Imported                                                         #
# assetName: (Optional) name of the asset                                                                    #
# assetType: (Optional) Type of the asset. Currently supported options: workflow, flowservice.               #
# devUser: (Optional) UserID for commits and audit                                                           #
# featureBranchName: ((Mandatory) Name of the feature branch.                                                #
# repoName: (Mandatory) Name of the corresponding repository.                                                #
# synchProject: (Mandatory) True if you want to synchronize complete project. If false, then you have to     #
#                provide assetID and assetType                                                               #
##############################################################################################################

trigger: none


pool:
  vmImage: ubuntu-latest

variables:
- name: init
  value: true
- group: webMethodsIO_group
- group: azure_group
- group: github_group
- name: repoPath
  value: $(gitOwner)/$(repoName)



steps:
- checkout: self
  submodules: "true"
  persistCredentials: "true"
  clean: "true"
  path: self

- script: |
    echo "##vso[task.setvariable variable=assetID;]NA"
    echo "##vso[task.setvariable variable=assetType;]NA"
    echo "##vso[task.setvariable variable=assetName;]NA"
  condition: eq(variables['synchProject'], 'true') 
  displayName: 'Adjust variables'



- bash: |
    pwd
    cd ../self
    pwd
    ls -ltr
    echo "##vso[task.setvariable variable=source_environment_hostname]`yq -e ".tenant.hostname" configs/play.yml`"
    echo "##vso[task.setvariable variable=source_environment_port]`yq -e ".tenant.port" configs/play.yml`"
    echo "##vso[task.setvariable variable=admin_user]`yq -e ".tenant.admin_username" configs/play.yml`"
    echo "##vso[task.setvariable variable=source_type]`yq -e ".tenant.type" configs/play.yml`"
    echo "##vso[task.setvariable variable=repo_user]`yq -e ".repo.user" configs/repo.yml`"
    
    echo "##vso[task.setvariable variable=dev_environment_hostname]`yq -e ".tenant.hostname" configs/dev.yml`"
    echo "##vso[task.setvariable variable=dev_environment_port]`yq -e ".tenant.port" configs/dev.yml`"
    echo "##vso[task.setvariable variable=dev_admin_user]`yq -e ".tenant.admin_username" configs/dev.yml`"

    echo "##vso[task.setvariable variable=qa_environment_hostname]`yq -e ".tenant.hostname" configs/qa.yml`"
    echo "##vso[task.setvariable variable=qa_environment_port]`yq -e ".tenant.port" configs/qa.yml`"
    echo "##vso[task.setvariable variable=qa_admin_user]`yq -e ".tenant.admin_username" configs/qa.yml`"

    echo "##vso[task.setvariable variable=prod_environment_hostname]`yq -e ".tenant.hostname" configs/prod.yml`"
    echo "##vso[task.setvariable variable=prod_environment_port]`yq -e ".tenant.port" configs/prod.yml`"
    echo "##vso[task.setvariable variable=prod_admin_user]`yq -e ".tenant.admin_username" configs/prod.yml`"

    echo "##vso[build.updatebuildnumber]$(Build.BuildNumber)-$(repoName)"
    echo $(System.DefaultWorkingDirectory)
  workingDirectory: '$(System.DefaultWorkingDirectory)'
  displayName: 'Get Environment Tenant Details'
# setup python environment
- script: |
    
    python3.10 -m pip3 install --upgrade pip
    pip3 install pynacl
    chmod +x ./pipelines/scripts/github/encryptGithubSecret.py

  displayName: 'Setup Python3 Environment'
  workingDirectory: '$(System.DefaultWorkingDirectory)'
  condition: succeeded()
- script: |
      cd ../

      ########GitHub 
        HOME_DIR=$(System.DefaultWorkingDirectory)/../

        chmod +x ./self/pipelines/scripts/github/*.sh
        ./self/pipelines/scripts/github/initializeRepo.sh $(repo_user) $(PAT) $(AZURE_TOKEN) $(repoName) $(devUser) $(featureBranchName) ${HOME_DIR} debug

  displayName: 'Create a repo and required branches'
  
- script: |


      cd ../
      LOCAL_DEV_URL=https://$(source_environment_hostname):$(source_environment_port)
      echo ${LOCAL_DEV_URL}
      HOME_DIR=$(System.DefaultWorkingDirectory)/../
      if [ $(init) == true ]; then
        echo "New repo created"
        pwd
        ls -ltr
        ######## Check & Create Project 
        chmod +x ./self/pipelines/scripts/*.sh
        ./self/pipelines/scripts/createProject.sh ${LOCAL_DEV_URL} $(admin_user) $(admin_password) $(repoName)

        echo "PROJECT ID TEMP FIX: Importing dummy flowservice ..."
        mkdir -p ${HOME_DIR}/$(repoName)/assets/flowservices/
        cp ./self/assets/flowservices/SampleFlowService.zip ${HOME_DIR}/$(repoName)/assets/flowservices/

        ./self/pipelines/scripts/importAsset.sh ${LOCAL_DEV_URL} $(admin_user) $(admin_password) $(repoName) "SampleFlowService" "flowservice" ${HOME_DIR} "false" $(source_type) debug

        echo "PROJECT ID TEMP FIX: Publishing & Deploying Project DEV..."
        ./self/pipelines/scripts/replicateProject.sh ${LOCAL_DEV_URL} $(admin_user) $(admin_password) $(repoName) $(dev_environment_hostname) $(dev_environment_port) $(dev_admin_user) "SampleFlowService" debug
        LOCAL_DEVE_URL=https://$(dev_environment_hostname):$(dev_environment_port)
        echo "PROJECT ID TEMP FIX: Deleting dummy flowservice DEV..."
        ./self/pipelines/scripts/deleteAssets.sh ${LOCAL_DEVE_URL} $(dev_admin_user) $(admin_password) $(repoName) "SampleFlowService" "flowservice" "false" debug

        echo "PROJECT ID TEMP FIX: Publishing & Deploying Project QA..."
        ./self/pipelines/scripts/replicateProject.sh ${LOCAL_DEV_URL} $(admin_user) $(admin_password) $(repoName) $(qa_environment_hostname) $(qa_environment_port) $(qa_admin_user) "SampleFlowService" debug
        LOCAL_QA_URL=https://$(qa_environment_hostname):$(qa_environment_port)
        echo "PROJECT ID TEMP FIX: Deleting dummy flowservice QA..."
        ./self/pipelines/scripts/deleteAssets.sh ${LOCAL_QA_URL} $(qa_admin_user) $(admin_password) $(repoName) "SampleFlowService" "flowservice" "false" debug


        echo "PROJECT ID TEMP FIX: Publishing & Deploying Project PROD..."
        ./self/pipelines/scripts/replicateProject.sh ${LOCAL_DEV_URL} $(admin_user) $(admin_password) $(repoName) $(prod_environment_hostname) $(prod_environment_port) $(prod_admin_user) "SampleFlowService" debug
        LOCAL_PROD_URL=https://$(prod_environment_hostname):$(prod_environment_port)
        echo "PROJECT ID TEMP FIX: Deleting dummy flowservice PROD..."
        ./self/pipelines/scripts/deleteAssets.sh ${LOCAL_PROD_URL} $(prod_admin_user) $(admin_password) $(repoName) "SampleFlowService" "flowservice" "false" debug 

        echo "PROJECT ID TEMP FIX: Deleting dummy flowservice PLAY..."
        ./self/pipelines/scripts/deleteAssets.sh ${LOCAL_DEV_URL} $(admin_user) $(admin_password) $(repoName) "SampleFlowService" "flowservice" "false" debug 


      else
        ######## Create a feature branch from prod 
        echo "Repo Exists, Check and sync feature branch from Prod"
        if [ $(synchProject) != true ]; then
          echo "Patch Initialize"
          if [ -z "$(assetID)" ]; then
            echo "##vso[task.logissue type=error;]Missing parameter \"assetID\""
            echo "##vso[task.complete result=Failed;]"
            exit 1
          fi
                  
          if [ -z "$(assetType)" ]; then
            echo "##vso[task.logissue type=error;]Missing parameter \"assetType\""
            echo "##vso[task.complete result=Failed;]"
            exit 1
          fi
        else
          echo "Project Initialize"
       fi  
          rm -rf ./$(repoName)

          git clone -b production https://$(repo_user):$(PAT)@github.com/$(repo_user)/$(repoName).git
          cd $(repoName)
          branchExists=$(git ls-remote --exit-code --heads origin $(featureBranchName))
          if [ ! -z "${branchExists// }" ]; 
          then
              echo "Branch $(featureBranchName) already exists"
          else
              echo "Branch $(featureBranchName) doesnt exists, synching from prod ..."
              chmod +x ../self/pipelines/scripts/github/*.sh
              ../self/pipelines/scripts/github/createFeatureFromProdBranch.sh $(devUser) $(featureBranchName) ${HOME_DIR} debug
              # Project Check
              chmod +x ../self/pipelines/scripts/*.sh
              echo "Check and create Project ..."
              ../self/pipelines/scripts/createProject.sh ${LOCAL_DEV_URL} $(admin_user) $(admin_password) $(repoName)
              # Import
                  echo "Importing asset ..."
              ../self/pipelines/scripts/importAsset.sh ${LOCAL_DEV_URL} $(admin_user) $(admin_password) $(repoName) $(assetID) $(assetType) ${HOME_DIR} $(synchProject) $(source_type) debug
          
              
          fi
      fi
  displayName: 'Create / Sychronize the projects'
  

  